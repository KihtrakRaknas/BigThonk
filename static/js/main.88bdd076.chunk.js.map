{"version":3,"sources":["firebase.js","Components/PostMini.js","Components/LoadingDiv.js","Screens/Home.js","Components/Comment.js","Screens/BlogPost.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","PostMini","props","state","views","comments","database","ref","this","id","on","snapshot","snap","val","setState","Object","keys","length","className","img","src","alt","title","ReactHtmlParser","text","to","name","date","toLocaleDateString","toLocaleTimeString","React","Component","LoadingDiv","setTimeout","showText","type","color","height","width","Home","getPosts","fetch","then","res","json","postsJSON","miniPosts","posts","post","console","log","push","slug","excerpt","Date","post_thumbnail","URL","author","first_name","last_name","key","catch","encodeURIComponent","Comment","Math","random","getColor","style","borderRadius","borderWidth","borderColor","borderStyle","padding","paddingLeft","textDecoration","BlogPost","commentInput","writing","class","placeholder","rows","onClick","postRef","match","params","postId","document","getElementById","value","trim","alert","postKey","child","update","checkFirebase","transaction","commentsEl","commentID","comment","JSON","stringify","getPost","content","err","App","basename","data-toggle","data-target","aria-controls","aria-expanded","aria-label","href","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.88bdd076.chunk.js","sourcesContent":["import firebase from 'firebase';\r\n\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyBHgeNNvgO_HbYJ6NWNnVs8Y8Xbg0Xealw\",\r\n    authDomain: \"big-thonk.firebaseapp.com\",\r\n    databaseURL: \"https://big-thonk.firebaseio.com\",\r\n    projectId: \"big-thonk\",\r\n    storageBucket: \"big-thonk.appspot.com\",\r\n    messagingSenderId: \"199147602141\",\r\n    appId: \"1:199147602141:web:e1a0ff1fdf473a66ab5b34\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\nexport default firebase;","import React, {Fragment} from 'react'\r\nimport ReactHtmlParser from 'react-html-parser';\r\nimport { Link, BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport firebase from '../firebase.js'\r\nexport default class PostMini extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    componentDidMount(){\r\n        const postRef = firebase.database().ref(this.props.id)\r\n        postRef.on('value',(snapshot)=>{\r\n            let snap = snapshot.val()\r\n            if(snap)\r\n                this.setState({views: snap.views?snap.views:0,comments: snap.comments?Object.keys(snap.comments).length:0})\r\n        })\r\n    }\r\n    state={\r\n        views:0,\r\n        comments:0\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"col-sm-6\">\r\n                <div className=\"card\" >\r\n                    {this.props.img?<img className=\"card-img-top\" src={this.props.img} alt=\"Card image cap\"/>:null}\r\n                    <div className=\"card-body\" >\r\n                        <h3 className=\"card-title\">{this.props.title}</h3>\r\n                        <p className=\"card-text\">{ReactHtmlParser(this.props.text)}</p>\r\n                        <div className=\"btn-div\">\r\n                        <Link to={\"/\"+this.props.id}><a className=\"btn btn btn-outline-primary\">Click Here to Read More</a></Link>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"card-footer\">\r\n                        { this.props.name +\" - \"+this.props.date.toLocaleDateString()+\"   \"+this.props.date.toLocaleTimeString()+\" - 👀\"+this.state.views+\" 💬\"+this.state.comments}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport ReactLoading from 'react-loading';\r\nexport default class LoadingDiv extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        setTimeout(()=>this.setState({showText:true}),500)\r\n        this.state={showText:false}\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <br/><br/><br/><br/><br/><br/><br/>\r\n                {this.state.showText?<p className=\"display-4\">Geting the latest content!</p>:null}\r\n                <ReactLoading type=\"cubes\" color=\"#ffffff\" height={'20%'} width={'20%'} />\r\n            </div>\r\n        )\r\n    }\r\n  }","import React from 'react';\nimport PostMini from '../Components/PostMini';\nimport LoadingDiv from '../Components/LoadingDiv';\n\nexport default class Home extends React.Component {\n  constructor(props) {\n    super(props);\n    // Don't call this.setState() here!\n    this.state = {};\n    this.getPosts();\n  }\n\n  render(){\n    return (\n      <div className=\"App container\">\n        <div id=\"Posts\" className=\"row\">\n          {this.state.miniPosts?this.state.miniPosts:<LoadingDiv></LoadingDiv>}\n        </div>\n      </div>\n    );\n  }\n\n  getPosts = ()=>{\n    fetch(\"https://public-api.wordpress.com/rest/v1.1/sites/176343073/posts/\").then((res)=>res.json()).then((postsJSON)=>{\n      let miniPosts = [];\n      for(let post of postsJSON.posts){\n        console.log(post)\n        miniPosts.push(<PostMini id={post.slug} text={post.excerpt} date={new Date(post.date)} title={post.title} img={post.post_thumbnail?post.post_thumbnail.URL:null} name={post.author.first_name+\" \"+post.author.last_name} key={post.id}></PostMini>)\n      }\n      this.setState({miniPosts})\n    }).catch(()=>{\n      fetch('https://wordpress-redirect.herokuapp.com/?url='+encodeURIComponent(\"https://public-api.wordpress.com/rest/v1.1/sites/176343073/posts/\")).then((res)=>res.json()).then((postsJSON)=>{\n        let miniPosts = [];\n        for(let post of postsJSON.posts){\n          console.log(post)\n          miniPosts.push(<PostMini id={post.slug} text={post.excerpt} date={new Date(post.date)} title={post.title} img={post.post_thumbnail?post.post_thumbnail.URL:null} name={post.author.first_name+\" \"+post.author.last_name} key={post.id}></PostMini>)\n        }\n        this.setState({miniPosts})\n      })\n    })\n  }\n}\n","import React, {Fragment} from 'react'\r\n\r\nexport default class Comment extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n    getColor(){ \r\n        return \"hsl(\" + 360 * Math.random() + ',' + (25 + 70 * Math.random()) + '%,' + (85 + 10 * Math.random()) + '%)'\r\n    }      \r\n\r\n    render(){\r\n        let color = this.getColor()\r\n        console.log(color)\r\n        return(\r\n            <div className=\"comment\" style={{borderRadius:\"5px\",borderWidth:\"2px\", borderColor:color, color:color, borderStyle:\"solid\", padding: \"5px\" }}>\r\n                <h5 style={{paddingLeft:\"10px\", textDecoration:\"underline\"}}>{this.props.name}</h5>\r\n                <p>{this.props.text}</p>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, {Fragment} from 'react'\r\nimport ReactHtmlParser from 'react-html-parser';\r\nimport { Link, BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport LoadingDiv from '../Components/LoadingDiv';\r\nimport Comment from '../Components/Comment';\r\nimport firebase from '../firebase.js'\r\n\r\nexport default class BlogPost extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.getPost()\r\n    }\r\n    state={}\r\n    render(){\r\n        let postId = this.props.match.params.postId\r\n        if(postId==\"about\"||postId==\"authors\")\r\n            return  <div className=\"App container\">{ReactHtmlParser(this.state.content)}</div>\r\n        if(this.state.err)\r\n            return  <div className=\"App container\"><br/><br/><h1 className=\"text-center\">Couldn't find the post you are looking for</h1><h3 className=\"text-center\">Double check your link!</h3></div>\r\n        return(\r\n            <div className=\"App container\">\r\n                <br/>\r\n                    {!this.state.content?<LoadingDiv></LoadingDiv>:<div>\r\n                        <h1 className=\"text-center\">{this.state.title}</h1>\r\n                        <h3 className=\"text-center\">{this.state.name?\"By: \"+this.state.name+\" - \"+this.state.date.toLocaleDateString()+\"   \"+this.state.date.toLocaleTimeString():null}</h3>\r\n                        <br/>\r\n                        {ReactHtmlParser(this.state.content)}\r\n                        <br/>\r\n                        <br/>\r\n                        <h2 className=\"text-center\">Comments:</h2><br/>{this.commentInput()}\r\n                        {this.state.comments&&this.state.comments.length>0?this.state.comments:<p><em>No comments yet. You could be the first!</em></p>}\r\n                        <br/><br/>\r\n                    </div>}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    commentInput = ()=>{\r\n        if(!this.state.writing)\r\n            return <div><button className=\"btn btn btn-outline-success btn-block\" onClick={()=>this.setState({writing:true})}>Create Comment</button><br/></div>\r\n        return(\r\n            <div>\r\n            <input class=\"form-control\" id=\"nameInput\" placeholder=\"Type your name here\"></input><br/>\r\n            <textarea className=\"form-control\" id=\"textInput\" rows=\"3\" placeholder=\"Type your comment here\"></textarea><br/>\r\n            <button className=\"btn btn btn-outline-success btn-block\" onClick={this.post}>Post</button><br/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    post = () =>{\r\n        const postRef = firebase.database().ref(this.props.match.params.postId)\r\n        let name = document.getElementById(\"nameInput\").value\r\n        let text = document.getElementById(\"textInput\").value\r\n        if(name.trim()==\"\" || text.trim()==\"\")\r\n            alert(\"Please include a name and a comment before posting\");\r\n        else{\r\n            let postKey = postRef.child('comments').push().key\r\n            postRef.child('comments').update({[postKey]:{name,text}})\r\n        }\r\n    }\r\n\r\n    checkFirebase = () =>{\r\n        const postRef = firebase.database().ref(this.props.match.params.postId)\r\n        postRef.child('views').transaction(function(views) {\r\n            return (views || 0) + 1;\r\n        });\r\n        postRef.child('comments').on('value',(snapshot)=>{\r\n            let commentsEl = [];\r\n            let comments = snapshot.val()\r\n            if(comments)\r\n                for(let commentID in comments){\r\n                    let comment = comments[commentID]\r\n                    commentsEl.push(<Comment name={comment.name?comment.name:\"No Name\"} text={comment.text?comment.text:\"No Text\"} key={JSON.stringify(comment)}></Comment>)\r\n                }\r\n            this.setState({comments:commentsEl})\r\n        })\r\n    }\r\n\r\n    getPost = ()=>{\r\n        console.log(\"https://public-api.wordpress.com/rest/v1.1/sites/176343073/posts/slug:\"+this.props.match.params.postId)\r\n        fetch(\"https://public-api.wordpress.com/rest/v1.1/sites/176343073/posts/slug:\"+this.props.match.params.postId).then((post)=>{\r\n            console.log(post)\r\n          this.setState({name:post.author.first_name+\" \"+post.author.last_name,title:post.title,content:post.content, date:new Date(post.date), err:false})\r\n          this.checkFirebase();\r\n        }).catch((err)=>{\r\n            console.log('https://wordpress-redirect.herokuapp.com/?url='+encodeURIComponent(\"https://public-api.wordpress.com/rest/v1.1/sites/176343073/posts/slug:\"+this.props.match.params.postId))\r\n            fetch('https://wordpress-redirect.herokuapp.com/?url='+encodeURIComponent(\"https://public-api.wordpress.com/rest/v1.1/sites/176343073/posts/slug:\"+this.props.match.params.postId)).then((res)=>res.json()).then((post)=>{\r\n                console.log(post)\r\n              this.setState({name:post.author.first_name+\" \"+post.author.last_name,title:post.title,content:post.content, date:new Date(post.date), err:false})\r\n              this.checkFirebase();\r\n            }).catch((err)=>{\r\n                this.setState({err:true})\r\n            })\r\n        })\r\n      }\r\n}","import React from 'react';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link\r\n  } from \"react-router-dom\";\r\nimport Home from './Screens/Home'\r\nimport BlogPost from './Screens/BlogPost.js'\r\nimport './App.css';\r\n\r\nexport default function App() {\r\n    return (\r\n      <Router basename=\"/BigThonk\">\r\n        <div>\r\n            <nav class=\"navbar sticky-top navbar-expand-lg navbar-dark bg-dark\">\r\n                <Link to=\"/\" style={{color:\"white\"}}><a class=\"navbar-brand\">Big Thonk</a></Link>\r\n                <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span class=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                    <ul class=\"navbar-nav\">\r\n                        <li class=\"nav-item active\">\r\n                            <Link to=\"/\"><a class=\"nav-link\" href=\"#\">Home <span class=\"sr-only\">(current)</span></a></Link>\r\n                        </li>\r\n                        <li class=\"nav-item\">\r\n                            <Link to=\"/about\"><a class=\"nav-link\" href=\"#\">About</a></Link>\r\n                        </li>\r\n                        <li class=\"nav-item\">\r\n                            <Link to=\"/authors\"><a class=\"nav-link\" href=\"#\">Authors</a></Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n  \r\n          {/* A <Switch> looks through its children <Route>s and\r\n              renders the first one that matches the current URL. */}\r\n          <Switch>\r\n            <Route path=\"/:postId\" component={BlogPost} />\r\n            <Route exact={true} path=\"/\" component = {Home}/>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}